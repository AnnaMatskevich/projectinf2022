#ifndef _A_CARD_HPP_
#define _A_CARD_HPP_
// ----------------------------------------------------------------------------
/*
	Описание игровой карточки (Card)

	1. Каждая карточка состоят из 4 сторон:
		верхнаяя (top)
		правая   (right)
		нижняя   (bottom)
		левая    (left)
	2. Каждая cторона описывается следующим образом:

	3. Цена элемента на карточке (число ракушек на дороги, число бананов на суше, число рыбы в области моря)
		обозначается с структурах данных - cost

*/

// ----------------------------------------------------------------------------
// Типы дорог
// ----------------------------------------------------------------------------

enum RoadType : char
{
	road_no        = 0, 	// нет дороги
	road_stop_land = 1,		// дороги упирается от центра в сушу
	road_stop      = 2,		// дорога к центру концовка
	road_opposide  = 3,		// дорога на противоположную сторону
	road_right     = 4,		// дорога вправо
	road_left      = 5		// дорога влево
};

// ----------------------------------------------------------------------------
// Типы суши
// ----------------------------------------------------------------------------

enum LandType : char
{
	land_no       = 0,		// нет суши
	land_stop     = 1,		// суша занимает только эту сторону
	land_opposite = 2,		// суша занимает эту сторону и противоположную
	land_right    = 3,		// суша занимает эту сторону и правую
	land_left     = 4,		// суша занимает эту сторону и левую
	land_rigth_opposite = 5,// суша занимает эту сторону, правую и протовоположную
	land_left_opposite  = 6,// суша занимает эту сторону, левую и протовоположную
	land_rigth_left  	= 7	// суша занимает эту сторону, правую и левую
};

// ----------------------------------------------------------------------------
// Описание стороны карточки
// ----------------------------------------------------------------------------

struct CardSide
{
	char 		road_type;
	char 		road_cost;
	char 		land_type;
	char		land_cost;
	char		sea_right_cost;
	char		sea_left_cost;
	char		sea_right_to_fish;
	char		sea_left_to_fish;

	void clear()
	{
		no_road();
		no_land();
		no_sea_cost_no_fishing();
	}

	void 	no_road() 					{ road_type = road_no; road_cost = 0; }
	void 	no_land() 					{ land_type = land_no; land_cost = 0; }
	void 	no_sea_cost_no_fishing()  	{ sea_right_cost = 0; sea_left_cost = 0;  sea_right_to_fish = 0; sea_left_to_fish = 0; }
};

// ----------------------------------------------------------------------------
// Описание игровой карточки
// ----------------------------------------------------------------------------

struct Card
{
	int			index;		// индекс картинки
	void *		Panel;		// панель на которой будем рисать эту карточку
	void *		Image;		// изображение картинки
	CardSide	side_1;     // описание верхней стороны карточки
	CardSide	side_2;     // описание правой стороны карточки
	CardSide	side_3;		// описание нижней стороны карточки
	CardSide 	side_4;		// описание левой стороны карточки
	bool		has_island;	// есть остров? да = true / нет = false
	bool		on_field;	// на поле? да = true / нет = false

	// пустая карточка
	void clear()
	{
		index = -1; Panel = NULL; Image = NULL;
		side_1.clear(); side_2.clear(); side_3.clear(); side_4.clear();
		has_island = false; on_field = false;
	}
};

// ----------------------------------------------------------------------------
class GameCards
{
public:
	GameCards();
	~GameCards();


	// инициализация карточек
	bool 	init(int count);

	// описания карточек
	Card	cards[74];
};
// ----------------------------------------------------------------------------
inline
GameCards::GameCards()
{
	int i;
	for (i = 0; i < 74; i++)
	{
		cards[i].clear();
	}
}
// ----------------------------------------------------------------------------
inline
GameCards::~GameCards()
{

}
// ----------------------------------------------------------------------------
inline bool
GameCards::init(int count)
{
	int i;

	for (i = 0; i < count; i++)
	{
		cards[i].clear();
		cards[i].index = i;
	}

	// 0 - пустая

	// 1  - Fig-1-1
	// 2  - Fig-1-2
	// 3  - Fig-1-3
	// 4  - Fig-1-4
	// 5  - Fig-1-5
	// 6  - Fig-1-6
	// 7  - Fig-1-7
	// 8  - Fig-1-8

	// 9  - Fig-2-1
	// 10 - Fig-2-2
	// 11 - Fig-2-3
	// 12 - Fig-2-4
	// 13 - Fig-2-5

	// 14 - Fig-3-1
	// 15 - Fig-3-2
	// 16 - Fig-3-3
	// 17 - Fig-3-4
	// 18 - Fig-3-5
	// 19 - Fig-3-6
	// 20 - Fig-3-7
	// 21 - Fig-3-8
	// 22 - Fig-3-9

	// 23 - Fig-4-1

	// 24 - Fig-5-1
	// 25 - Fig-5-2
	// 26 - Fig-5-3
	// 27 - Fig-5-4
	// 28 - Fig-5-5

	// 29 - Fig-6-1
	// 30 - Fig-6-2
	// 31 - Fig-6-3

	// 32 - Fig-7-1
	// 33 - Fig-7-2

	// 34 - Fig-8-1
	// 35 - Fig-8-2

	// 36 - Fig-9-1
	// 37 - Fig-9-2
	// 38 - Fig-9-3

	// 39 - Fig-10-1

	// 40 - Fig-11-1
	// 41 - Fig-11-2

	// 42 - Fig-12-1
	// 43 - Fig-12-2
	// 44 - Fig-12-3

	// 45 - Fig-13-1
	// 46 - Fig-13-2
	// 47 - Fig-13-3

	// 48 - Fig-14-1
	// 49 - Fig-14-2
	// 50 - Fig-14-3

	// 51 - Fig-15-1
	// 52 - Fig-15-2

	// 53 - Fig-16-1
	// 54 - Fig-16-2
	// 55 - Fig-16-3
	// 56 - Fig-16-4
	// 57 - Fig-16-5
	// 58 - Fig-16-6

	// 59 - Fig-17-1
	// 60 - Fig-17-2
	// 61 - Fig-17-3
	// 62 - Fig-17-4
	// 63 - Fig-17-5

	// 64 - Fig-18-1

	// 65 - Fig-19-1
	// 66 - Fig-19-2
	// 67 - Fig-19-3

	// 68 - Fig-20-1

	// 69 - Fig-21-1

	// 70 - Fig-22-1
	// 71 - Fig-22-2

	// 72 - Fig-23-1

	// 73 - Fig-24-1

	return true;
};



#endif
